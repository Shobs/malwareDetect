<?php
class Malware {
    // we define 3 attributes
    // they are public so that we can access them using $post->author directly
  public $id;
  public $name;
  public $signature;
  public $comment;


  public function __construct($id, $name, $signature, $comment = null) {
    $this->id      = $id;
    $this->name  = $name;
    $this->signature = $signature;
    $this->comment = $comment;
  }

  /**
   * [all description]
   * @return [type] [description]
   */
  public static function all() {
    $list = [];
    $conn = Database::getInstance();
    $query = 'SELECT * FROM thr_malwares';

    $result = $conn->query($query) or die($conn->error);

    return $result->fetch_all(MYSQLI_ASSOC);
  }

  /**
   * [findByID description]
   * @param  [type] $id [description]
   * @return [type]     [description]
   */
  public static function findByID($id) {
    $conn = Database::getInstance();
    $query = 'SELECT * FROM thr_malwares WHERE id = %d';
    $result = $conn->query(sprintf($query, $id));
    if (!$result) return;
    $row = $result->fetch_assoc() or die($conn->error);

    return new Malware($row['id'], $row['name'], $row['signature'], $row['comment']);
  }

  /**
   * [findBySignature description]
   * @param  [type] $signature [description]
   * @return [type]            [description]
   */
  public static function findBySignature($signature) {
    $conn = Database::getInstance();
    $query = "SELECT * FROM thr_malwares WHERE signature = '%s'";
    $result = $conn->query(sprintf($query, $signature));
    if (!$result) return;
    $row = $result->fetch_assoc() or die($conn->error);

    return new Malware($row['id'], $row['name'], $row['signature'], $row['comment']);
  }

  /**
   * [create description]
   * @param  [type] $name      [description]
   * @param  [type] $signature [description]
   * @param  [type] $comment   [description]
   * @return [type]            [description]
   */
  public static function create($name, $signature, $comment = null) {
    $conn = Database::getInstance();

    if (is_null($comment)) {
      $query = "INSERT INTO thr_malwares (name, signature) VALUES ('%s', '%s')";
      $query = sprintf($query, $name, $signature);
    }else{
      $query = "INSERT INTO thr_malwares (name, signature, comment) VALUES ('%s', '%s', '%s')";
      $query = sprintf($query, $name, $signature, $comment);
    }

    return $conn->query($query);
  }

    /**
   * Opens file and reads fir st 30 characters
   * returned a hash version to avoid character type
   * problems with json_encoding and decoding
   * @param  [string] $tempDir [file location]
   * @return [string]          [ripemd128 hashed signature]
   */
  public static function generateSignature($tempDir){
    $signature = null;

    if (file_exists($tempDir)) {
      $fh = fopen($tempDir, 'r') or die("Failed to open file");
      $signature = fread($fh, 30);
      fclose($fh);
    }

    return hash('sha256', $signature);
  }

  /**
   * [delete description]
   * @return [type] [description]
   */
  public function delete(){
    $conn = Database::getInstance();
    $query = 'DELETE FROM thr_malwares WHERE id = %d';
    $result = $conn->query(sprintf($query, $this->id));

    return $result;

  }
}
?>